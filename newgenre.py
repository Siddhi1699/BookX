# -*- coding: utf-8 -*-
"""newgenre.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wbzNbhjdHM-_3F3jTeuzhwPrnoOpayZl
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import datetime

import warnings
warnings.filterwarnings('ignore')



path1 = "books.csv"
path2 = "ratings.csv"
path3 = "book_tags.csv"
path4 = "tags.csv"

books = pd.read_csv(path1)
ratings = pd.read_csv(path2)
book_tags = pd.read_csv(path3)
tags = pd.read_csv(path4)

books['original_publication_year'] = books['original_publication_year'].fillna(-1).apply(lambda x: int(x) if x != -1 else -1)

ratings_rmv_duplicates = ratings.drop_duplicates()
unwanted_users = ratings_rmv_duplicates.groupby('user_id')['user_id'].count()
unwanted_users = unwanted_users[unwanted_users < 3]
unwanted_ratings = ratings_rmv_duplicates[ratings_rmv_duplicates.user_id.isin(unwanted_users.index)]
new_ratings = ratings_rmv_duplicates.drop(unwanted_ratings.index)

new_ratings['title'] = books.set_index('id').title.loc[new_ratings.book_id].values

v = books['ratings_count']
m = books['ratings_count'].quantile(0.95)
R = books['average_rating']
C = books['average_rating'].mean()
W = (R*v + C*m) / (v + m)

books['weighted_rating'] = W

qualified  = books.sort_values('weighted_rating', ascending=False).head(250)

genres = ["Art", "Biography", "Business", "Chick Lit", "Children's", "Christian", "Classics",
          "Comics", "Contemporary", "Cookbooks", "Crime", "Ebooks", "Fantasy", "Fiction",
          "Gay and Lesbian", "Graphic Novels", "Historical Fiction", "History", "Horror",
          "Humor and Comedy", "Manga", "Memoir", "Music", "Mystery", "Nonfiction", "Paranormal",
          "Philosophy", "Poetry", "Psychology", "Religion", "Romance", "Science", "Science Fiction", 
          "Self Help", "Suspense", "Spirituality", "Sports", "Thriller", "Travel", "Young Adult"]

genres = list(map(str.lower, genres))
genres[:4]

available_genres = tags.loc[tags.tag_name.str.lower().isin(genres)]

available_genres_books = book_tags[book_tags.tag_id.isin(available_genres.tag_id)]

available_genres_books['genre'] = available_genres.tag_name.loc[available_genres_books.tag_id].values
available_genres_books.head()

def build_chart1(genre):
  qualified = build_chart(genre)[cols].head(9)
  return qualified.values.tolist()

def build_chart(genre, percentile=0.85):
    print('dad')
    df = available_genres_books[available_genres_books['genre'] == genre.lower()]
    qualified = books.set_index('book_id').loc[df.goodreads_book_id]

    v = qualified['ratings_count']
    m = qualified['ratings_count'].quantile(percentile)
    R = qualified['average_rating']
    C = qualified['average_rating'].mean()
    qualified['weighted_rating'] = (R*v + C*m) / (v + m)

    qualified.sort_values('weighted_rating', ascending=False, inplace=True)
    return qualified

cols = ['title','authors','original_publication_year','average_rating','ratings_count','work_text_reviews_count','weighted_rating','image_url']

genre = 'Suspense'


print("lol")
def main():
  build_chart1()
  build_chart()



if __name__ == "__main__":
      build_chart1(genre)